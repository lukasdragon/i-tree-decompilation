// Decompiled with JetBrains decompiler
// Type: Eco.Util.Queries.SQLite.EstimateUtilProvider
// Assembly: Eco Util, Version=1.1.6757.0, Culture=neutral, PublicKeyToken=null
// MVID: 8C6433F7-3274-4315-B6F4-90179805B344
// Assembly location: C:\Program Files (x86)\i-Tree\EcoV6\Eco Util.dll

using Eco.Util.Queries.Interfaces;
using NHibernate;
using NHibernate.Type;
using System;
using System.Globalization;

namespace Eco.Util.Queries.SQLite
{
  internal class EstimateUtilProvider : IEstimateUtilProvider
  {
    private readonly IQuerySupplier _queryProvider;

    public EstimateUtilProvider(IQuerySupplier queryProvider) => this._queryProvider = queryProvider;

    public IQuery GetEstimateValue(string tableName, string c1, string c2) => (IQuery) this._queryProvider.Session.CreateSQLQuery(string.Format("SELECT \r\n                        SUM(EstimateValue) AS sumEstimate\r\n                    FROM {0}\r\n                    WHERE \r\n                        YearGuid = :y \r\n                        AND EstimateUnitsId = :estUnits \r\n                        AND {1} = :heatOrCoolingCVO \r\n                        AND EstimateType = :estType \r\n                        AND {2} <> :totCVO", (object) tableName, (object) c1, (object) c2)).AddScalar("sumEstimate", (IType) NHibernateUtil.Double);

    public IQuery GetTotalsSumEstimateValueByClassifier(
      string tableName,
      string c1,
      string c2)
    {
      return (IQuery) this._queryProvider.Session.CreateSQLQuery(string.Format("SELECT SUM(EstimateValue) AS EstimateValue\r\n                    FROM {0}\r\n                    WHERE \r\n                        YearGuid = :y \r\n                        AND EstimateUnitsId = :estUnits \r\n                        AND {1} = :classifier \r\n                        AND {2} = :totCVO", (object) tableName, (object) c1, (object) c2)).AddScalar("EstimateValue", (IType) NHibernateUtil.Double);
    }

    public IQuery GetTotalsExoticToContinent(string tableName, string c1, string c2) => (IQuery) this._queryProvider.Session.CreateSQLQuery(string.Format("SELECT \r\n                        {1},\r\n                        SUM(EstimateValue) AS EstimateValue\r\n                    FROM {0}\r\n                    WHERE \r\n                        YearGuid = :y \r\n                        AND EstimateUnitsId = :estUnits \r\n                        AND {1} <> :continent \r\n                        AND {1} <> :state \r\n                        AND {2} = :totCVO\r\n                    GROUP BY {1} \r\n                    ORDER BY SUM(EstimateValue) DESC", (object) tableName, (object) c1, (object) c2)).AddScalar(c1, (IType) NHibernateUtil.Int32).AddScalar("EstimateValue", (IType) NHibernateUtil.Double);

    public IQuery GetEstimatedValueSum(string tableName, string c1) => (IQuery) this._queryProvider.Session.CreateSQLQuery(string.Format("SELECT \r\n                        SUM(EstimateValue) AS sumEstimate \r\n                    FROM {0}\r\n                    WHERE \r\n                        YearGuid = :y\r\n                        AND EstimateType = :estType\r\n                        AND EstimateUnitsId = :estUnits \r\n                        AND {1} <> :totalsCVO", (object) tableName, (object) c1));

    public IQuery GetMultipleFieldsData(string tableName, string fields)
    {
      ISQLQuery q = this._queryProvider.Session.CreateSQLQuery(string.Format("SELECT\r\n                        {1}, \r\n                        EstimateValue, \r\n                        EstimateStandardError \r\n                    FROM\r\n                        {0}\r\n                    WHERE \r\n                        YearGuid = :y \r\n                        AND EquationType = :equType \r\n                        AND EstimateType = :estType \r\n                        AND EstimateUnitsId = :estUnits\r\n                        AND (EstimateValue > 0 OR EstimateStandardError > 0)", (object) tableName, (object) fields)).AddScalar("EstimateValue", (IType) NHibernateUtil.Double).AddScalar("EstimateStandardError", (IType) NHibernateUtil.Double);
      this.AddIntScalartToFields(q, fields);
      return (IQuery) q;
    }

    public IQuery GetSignificantMultipleFieldsData(string tableName, string c1, string c2) => (IQuery) this._queryProvider.Session.CreateSQLQuery(string.Format("SELECT\r\n                        {1},\r\n                        {2},\r\n                        EstimateValue, \r\n                        EstimateStandardError \r\n                    FROM\r\n                        {0}\r\n                    WHERE \r\n                        YearGuid = :y \r\n                        AND EquationType = :eqType \r\n                        AND EstimateType = :estType\r\n                        AND EstimateUnitsId = :estUnits \r\n                        AND (EstimateValue > 0.0000001 OR EstimateStandardError > 0.0000001)", (object) tableName, (object) c1, (object) c2)).AddScalar(c1, (IType) NHibernateUtil.Int32).AddScalar(c2, (IType) NHibernateUtil.Int32).AddScalar("EstimateValue", (IType) NHibernateUtil.Double).AddScalar("EstimateStandardError", (IType) NHibernateUtil.Double);

    public IQuery GetSignificantEstimateValues(string tableName, string c1) => (IQuery) this._queryProvider.Session.CreateSQLQuery(string.Format("SELECT\r\n                        {1},\r\n                        EstimateValue\r\n                    FROM\r\n                        {0}\r\n                    WHERE \r\n                        YearGuid = :y \r\n                        AND EstimateType = :estType\r\n                        AND EstimateUnitsId = :estUnits \r\n                        AND {1} <> :totalsCVO\r\n                        AND EstimateValue > 0 ", (object) tableName, (object) c1)).AddScalar(c1, (IType) NHibernateUtil.Int32).AddScalar("EstimateValue", (IType) NHibernateUtil.Double);

    public IQuery GetSignificantEstimateValuesGroupedBy(
      string tableName,
      string c1,
      string c2)
    {
      return (IQuery) this._queryProvider.Session.CreateSQLQuery(string.Format("SELECT\r\n                        {1},\r\n                        SUM(EstimateValue) AS SumOfEstimate \r\n                    FROM\r\n                        {0}\r\n                    WHERE \r\n                        YearGuid = :y \r\n                        AND EstimateUnitsId = :estUnits \r\n                        AND {2} = :totalsCVO\r\n                        AND EstimateValue > 0 \r\n                    GROUP BY {1}  \r\n                    ORDER BY SUM(EstimateValue) DESC", (object) tableName, (object) c1, (object) c2)).AddScalar(c1, (IType) NHibernateUtil.Int32).AddScalar("SumOfEstimate", (IType) NHibernateUtil.Double);
    }

    public IQuery GetEstimatedValues(string tableName, string c1) => (IQuery) this._queryProvider.Session.CreateSQLQuery(string.Format("SELECT\r\n                        {1},\r\n                        EstimateValue\r\n                    FROM\r\n                        {0}\r\n                    WHERE \r\n                        YearGuid = :y \r\n                        AND EstimateType = :estType\r\n                        AND EstimateUnitsId = :estUnits \r\n                        AND {1} <> :totalsCVO\r\n                    ORDER BY EstimateValue DESC", (object) tableName, (object) c1)).AddScalar(c1, (IType) NHibernateUtil.Int32).AddScalar("EstimateValue", (IType) NHibernateUtil.Double);

    public IQuery GetEstimateValuesForClassifier(string tableName, string classifier) => (IQuery) this._queryProvider.Session.CreateSQLQuery(string.Format("SELECT EstimateValue \r\n                    FROM {0} \r\n                    WHERE \r\n                        YearGuid = :y \r\n                        AND EstimateType = :estType \r\n                        AND EstimateUnitsId = :estUnits \r\n                        AND {1} = :classifier", (object) tableName, (object) classifier)).AddScalar("EstimateValue", (IType) NHibernateUtil.Double);

    public IQuery GetSignificantTotalsEstimateValues(string tableName, string c1, string c2) => (IQuery) this._queryProvider.Session.CreateSQLQuery(string.Format("SELECT\r\n                        {1},\r\n                        {2},\r\n                        EstimateValue,\r\n                        EstimateStandardError \r\n                    FROM\r\n                        {0}\r\n                    WHERE \r\n                        YearGuid = :y \r\n                        AND EstimateType = :estType\r\n                        AND EstimateUnitsId = :estUnits \r\n                        AND {1} = :totalsCVO\r\n                        AND (EstimateValue > 0 OR EstimateStandardError > 0) ", (object) tableName, (object) c1, (object) c2)).AddScalar(c1, (IType) NHibernateUtil.Int32).AddScalar(c2, (IType) NHibernateUtil.Int32).AddScalar("EstimateValue", (IType) NHibernateUtil.Double).AddScalar("EstimateStandardError", (IType) NHibernateUtil.Double);

    public IQuery GetMultipleFieldsData2(string tableName, string[] columns)
    {
      ISQLQuery sqlQuery = this._queryProvider.Session.CreateSQLQuery(string.Format("SELECT \r\n                        {1},\r\n                        EstimateValue, \r\n                        EstimateStandardError \r\n                    FROM {0} \r\n                    WHERE \r\n                        YearGuid = :y \r\n                        AND EstimateType = :estType\r\n                        AND EstimateUnitsId = :estUnits \r\n                        AND (EstimateValue > 0 OR EstimateStandardError > 0)", (object) tableName, (object) string.Join(", ", columns)));
      foreach (string column in columns)
        sqlQuery.AddScalar(column, (IType) NHibernateUtil.Int32);
      return (IQuery) sqlQuery.AddScalar("EstimateValue", (IType) NHibernateUtil.Double).AddScalar("EstimateStandardError", (IType) NHibernateUtil.Double);
    }

    public IQuery GetEstimatedPollution(string tableName, string cond1) => (IQuery) this._queryProvider.Session.CreateSQLQuery(string.Format("SELECT SUM(EstimateValue) AS EV \r\n                    FROM {0} \r\n                    WHERE \r\n                        YearGuid = :y\r\n                        AND EstimateUnitsId = :estUnits \r\n                        AND EstimateType = :estType \r\n                        AND {1} = :pollCVO", (object) tableName, (object) cond1)).AddScalar("EV", (IType) NHibernateUtil.Double);

    public IQuery GetPollutantByPlantCategory(
      string plantCategory,
      string column1,
      double multiplier1,
      string column2,
      double multiplier2)
    {
      return (IQuery) this._queryProvider.Session.CreateSQLQuery(string.Format("SELECT\r\n                        TimeStamp AS DT, \r\n                        {1} * {2} AS ITEM1,\r\n                        {3} * {4} AS ITEM2 \r\n                    FROM HourlyHydroResults \r\n                    WHERE \r\n                        Category = '{0}' \r\n                        AND YearGuid = :y\r\n                    ORDER BY\r\n                        TimeStamp", (object) plantCategory, (object) column1, (object) multiplier1, (object) column2, (object) multiplier2)).AddScalar("DT", (IType) NHibernateUtil.DateTime).AddScalar("ITEM1", (IType) NHibernateUtil.Double).AddScalar("ITEM2", (IType) NHibernateUtil.Double);
    }

    public IQuery GetUVIndexReduction(string column) => (IQuery) this._queryProvider.Session.CreateSQLQuery(string.Format("SELECT \r\n                        TimeStamp AS DT, \r\n                        {0} AS ITEM1 \r\n                    FROM \r\n                        UVIndexReduction \r\n                    WHERE \r\n                        YearGuid = :y \r\n                    ORDER BY \r\n                        date(TimeStamp)", (object) column)).AddScalar("DT", (IType) NHibernateUtil.DateTime).AddScalar("ITEM1", (IType) NHibernateUtil.Double);

    public IQuery GetHourlyUFOREBResults(string column) => (IQuery) this._queryProvider.Session.CreateSQLQuery(string.Format("SELECT\r\n                        TimeStamp AS DT,\r\n                        {0} AS ITEM\r\n                    FROM HourlyUFOREBResults\r\n                    WHERE\r\n                        YearGuid = :y\r\n                        AND Category = :category\r\n                    ORDER BY\r\n                        datetime(TimeStamp)", (object) column)).AddScalar("DT", (IType) NHibernateUtil.DateTime).AddScalar("ITEM", (IType) NHibernateUtil.Double);

    public IQuery GetLanduseLeafAreas(string table, string strata, string species) => (IQuery) this._queryProvider.Session.CreateSQLQuery(string.Format("SELECT \r\n                        {1}, \r\n                        {2}, \r\n                        EstimateValue \r\n                    FROM {0} \r\n                    WHERE\r\n                        YearGuid = :y AND\r\n                        EstimateType = :estType AND \r\n                        EstimateUnitsId = :estUnits AND \r\n                        EquationType = :eqType AND\r\n                        {1} <> :strataStudyArea AND\r\n                        {2} <> :speciesTotal\r\n                    ORDER BY {1}", (object) table, (object) strata, (object) species)).AddScalar(strata, (IType) NHibernateUtil.Int32).AddScalar(species, (IType) NHibernateUtil.Int32).AddScalar("EstimateValue", (IType) NHibernateUtil.Double);

    public IQuery GetTopPollutant(string treeShrubCondition) => (IQuery) this._queryProvider.Session.CreateSQLQuery(string.Format("SELECT \r\n                        top 1 Pollutant \r\n                    FROM \r\n                        Pollutants \r\n                    WHERE \r\n                        YearGuid = :y \r\n                        {0} \r\n                        AND Trans > 0", (object) treeShrubCondition)).AddScalar("Pollutant", (IType) NHibernateUtil.String);

    public IQuery GetHourlyPollution(
      string para,
      string treeShrubCondition,
      double valueMultiplier)
    {
      return (IQuery) this._queryProvider.Session.CreateSQLQuery(string.Format("SELECT \r\n                        printf(\r\n                            '%04d-%02d-%02d %02d:00:00', \r\n                            Q.Year, Q.Month, Q.Day, Q.Hour\r\n                        ) AS DT, \r\n                        \r\n                        Q.Pollutant, \r\n                        {2} * sum(Q.avgValue1) AS avgValue \r\n                    FROM\r\n                        (SELECT \r\n                            Year, \r\n                            JDay, \r\n                            Month, \r\n                            Day, \r\n                            Hour, \r\n                            Pollutant, \r\n                            TreeShrub, \r\n                            avg([{0}]\r\n                        ) AS avgValue1 \r\n                        FROM \r\n                            Pollutants \r\n                        WHERE \r\n                            YearGuid = :y \r\n                            {1} \r\n                            AND Pollutant = :pollName \r\n                        Group BY \r\n                            Year, JDay, Month, Day, Hour, Pollutant, TreeShrub) AS Q \r\n                    Group BY Year, JDay, Month, Day, Hour, Pollutant \r\n                    ORDER BY Year, JDay, Month, Day, Hour, Pollutant", (object) para, (object) treeShrubCondition, (object) valueMultiplier)).AddScalar("DT", (IType) NHibernateUtil.DateTime).AddScalar("Pollutant", (IType) NHibernateUtil.String).AddScalar("avgValue", (IType) NHibernateUtil.Double);
    }

    public IQuery GetEstimatedValues(string tableName, string col, string classifier) => (IQuery) this._queryProvider.Session.CreateSQLQuery(string.Format("SELECT \r\n                        {1}, \r\n                        {2}, \r\n                        EstimateValue \r\n                    FROM {0} \r\n                    WHERE \r\n                        YearGuid = :y \r\n                        AND EstimateType = :estType \r\n                        AND EstimateUnitsId = :estUnits \r\n                        AND EquationType = :eqType \r\n                        AND {1} <> :classifier", (object) tableName, (object) col, (object) classifier)).AddScalar(col, (IType) NHibernateUtil.Int32).AddScalar(classifier, (IType) NHibernateUtil.Int32).AddScalar("EstimateValue", (IType) NHibernateUtil.Double);

    public IQuery GetSpeciesByStratum(string tableName, string c1, string c2) => (IQuery) this._queryProvider.Session.CreateSQLQuery(string.Format("SELECT \r\n                        {1}, \r\n                        {2}\r\n                    FROM {0} \r\n                    WHERE \r\n                        YearGuid = :y \r\n                        AND EstimateType = :estType \r\n                        AND EstimateUnitsId = :estUnits \r\n                        AND {1} <> :strataTotalCVO\r\n                        AND {2} <> :speciesTotalCVO", (object) tableName, (object) c1, (object) c2)).AddScalar(c1, (IType) NHibernateUtil.Int32).AddScalar(c2, (IType) NHibernateUtil.Int32);

    public IQuery GetEstimateValuesForClassifier2(string tableName, string c1, string c2) => (IQuery) this._queryProvider.Session.CreateSQLQuery(string.Format("SELECT EstimateValue\r\n                    FROM {0} \r\n                    WHERE \r\n                        YearGuid = :y \r\n                        AND EstimateType = :estType \r\n                        AND EstimateUnitsId = :estUnits \r\n                        AND {1} = :c1\r\n                        AND {2} = :c2", (object) tableName, (object) c1, (object) c2)).AddScalar("EstimateValue", (IType) NHibernateUtil.Double);

    public IQuery GetEstimateValuesWithSE(string tableName, string c1) => (IQuery) this._queryProvider.Session.CreateSQLQuery(string.Format("SELECT \r\n                        {1}, \r\n                        EstimateValue, \r\n                        EstimateStandardError \r\n                    FROM {0} \r\n                    WHERE \r\n                        YearGuid = :y \r\n                        AND EstimateType = :estType \r\n                        AND EstimateUnitsId = :estUnits \r\n                        AND EquationType = :eqType \r\n                        AND {1} <> :totalsCVO \r\n                    ORDER BY {1} ASC", (object) tableName, (object) c1)).AddScalar(c1, (IType) NHibernateUtil.Int32).AddScalar("EstimateValue", (IType) NHibernateUtil.Double).AddScalar("EstimateStandardError", (IType) NHibernateUtil.Double);

    public IQuery GetEstimateValuesWithSEAndTotals(string tableName, string c1) => (IQuery) this._queryProvider.Session.CreateSQLQuery(string.Format("SELECT \r\n                        {1}, \r\n                        EstimateValue, \r\n                        EstimateStandardError \r\n                    FROM {0} \r\n                    WHERE \r\n                        YearGuid = :y \r\n                        AND EstimateType = :estType \r\n                        AND EstimateUnitsId = :estUnits \r\n                    ORDER BY {1} ASC", (object) tableName, (object) c1)).AddScalar(c1, (IType) NHibernateUtil.Int32).AddScalar("EstimateValue", (IType) NHibernateUtil.Double).AddScalar("EstimateStandardError", (IType) NHibernateUtil.Double);

    public IQuery GetEstimatedSpeciesByStratumValuesWithSE(
      string tableName,
      string c1,
      string c2)
    {
      return (IQuery) this._queryProvider.Session.CreateSQLQuery(string.Format("SELECT \r\n                        {1}, \r\n                        {2}, \r\n                        EstimateValue, \r\n                        EstimateStandardError \r\n                    FROM {0} \r\n                    WHERE \r\n                        YearGuid = :y \r\n                        AND EstimateType = :estType \r\n                        AND EstimateUnitsId = :estUnits \r\n                        AND EquationType = :eqType \r\n                    ORDER BY {1}, {2} ASC", (object) tableName, (object) c1, (object) c2)).AddScalar(c1, (IType) NHibernateUtil.Int32).AddScalar(c2, (IType) NHibernateUtil.Int32).AddScalar("EstimateValue", (IType) NHibernateUtil.Double).AddScalar("EstimateStandardError", (IType) NHibernateUtil.Double);
    }

    public IQuery GetEstimatedStratumValues(string tableName, string c1) => (IQuery) this._queryProvider.Session.CreateSQLQuery(string.Format("SELECT \r\n                        {1}, \r\n                        EstimateValue \r\n                    FROM {0} \r\n                    WHERE \r\n                        YearGuid = :y \r\n                        AND EstimateType = :estType \r\n                        AND EstimateUnitsId = :estUnits \r\n                        AND EquationType = :eqType \r\n                    ORDER BY {1} ASC", (object) tableName, (object) c1)).AddScalar(c1, (IType) NHibernateUtil.Int32).AddScalar("EstimateValue", (IType) NHibernateUtil.Double);

    public IQuery GetEstimatedPollutantsValues(string tableName, string c1) => (IQuery) this._queryProvider.Session.CreateSQLQuery(string.Format("SELECT \r\n                        {1}, \r\n                        Pollutant, \r\n                        SUM(EstimateValue) AS PolutionRemoval \r\n                    FROM {0}\r\n                    WHERE \r\n                        YearGuid = :y \r\n                        AND EstimateType = :estType \r\n                        AND EstimateUnitsId = :estUnits \r\n                        AND EquationType = :eqType\r\n                        AND {1} <> :speciesTotalCVO \r\n                    GROUP BY {1}, Pollutant", (object) tableName, (object) c1)).AddScalar(c1, (IType) NHibernateUtil.Int32).AddScalar("Pollutant", (IType) NHibernateUtil.Int32).AddScalar("PolutionRemoval", (IType) NHibernateUtil.Double);

    public IQuery GetEstimatedPollutantsValuesByStratum(
      string tableName,
      string c1,
      string c2)
    {
      return (IQuery) this._queryProvider.Session.CreateSQLQuery(string.Format("SELECT \r\n                        {2}, \r\n                        SUM(EstimateValue) AS sumEstimate \r\n                    FROM {0}\r\n                    WHERE \r\n                        YearGuid = :y \r\n                        AND EstimateType = :estType \r\n                        AND EstimateUnitsId = :estUnits \r\n                        AND {1} <> :totalsCVO \r\n                    GROUP BY {2}", (object) tableName, (object) c1, (object) c2)).AddScalar(c2, (IType) NHibernateUtil.Int32).AddScalar("sumEstimate", (IType) NHibernateUtil.Double);
    }

    public IQuery GetEstimatedPollutantsValuesBySpecies(string tableName, string c1) => (IQuery) this._queryProvider.Session.CreateSQLQuery(string.Format("SELECT \r\n                        {1}, \r\n                        SUM(EstimateValue) AS sumEstimate \r\n                    FROM {0}\r\n                    WHERE \r\n                        YearGuid = :y \r\n                        AND EstimateType = :estType \r\n                        AND EstimateUnitsId = :estUnits \r\n                        AND {1} <> :totalsCVO \r\n                    GROUP BY {1}\r\n                    ORDER BY Sum(EstimateValue) DESC", (object) tableName, (object) c1)).AddScalar(c1, (IType) NHibernateUtil.Int32).AddScalar("sumEstimate", (IType) NHibernateUtil.Double);

    public IQuery GetGroundCoversExcludingTreesAndShrubs(
      string tableName,
      string c1,
      string c2)
    {
      return (IQuery) this._queryProvider.Session.CreateSQLQuery(string.Format("SELECT \r\n                        {2}, \r\n                        EstimateValue\r\n                    FROM {0}\r\n                    WHERE \r\n                        YearGuid = :y \r\n                        AND {1} = :totalsCVO \r\n                        AND {2} <> :treeGroundCoverOrder \r\n                        AND {2} <> :shrubGroundCoverOrder \r\n                        AND {2} <> :plantSpaceCoverOrder \r\n                        AND EstimateType = :estType \r\n                        AND EstimateUnitsId = :estUnits \r\n                    ORDER BY EstimateValue DESC", (object) tableName, (object) c1, (object) c2)).AddScalar(c2, (IType) NHibernateUtil.Int32).AddScalar("EstimateValue", (IType) NHibernateUtil.Double);
    }

    public IQuery GetSpeciesCountsWithLeafArea(string tableName, string c1) => (IQuery) this._queryProvider.Session.CreateSQLQuery(string.Format("SELECT\r\n                \t    TN.{1} AS SpeciesOrder, \r\n                \t    TN.EstimateValue AS TreeNo,\r\n                \t    LA.EstimateValue AS LeafArea \r\n                    FROM {0} AS TN \r\n                \t    INNER JOIN {0} AS LA \r\n                \t    ON \r\n                \t    TN.YearGuid = LA.YearGuid \r\n                \t    AND TN.{1} = LA.{1}\r\n                    WHERE   \r\n                        TN.{1} <> :totalsCVO\r\n                        And TN.YearGuid = :y\r\n                        And TN.EstimateType = :estTypeNumTrees\r\n                        And TN.EquationType =  :eqTypeNone\r\n                        And TN.EstimateUnitsId = :countUnit\r\n                        And LA.EstimateType = :estTypeLeafArea\r\n                        And LA.EquationType =  :eqTypeNoneLA\r\n                        And LA.EstimateUnitsId = :estUnitLeafArea\r\n                    ORDER BY TN.EstimateValue DESC", (object) tableName, (object) c1)).AddScalar("SpeciesOrder", (IType) NHibernateUtil.Int32).AddScalar("TreeNo", (IType) NHibernateUtil.Double).AddScalar("LeafArea", (IType) NHibernateUtil.Double);

    public IQuery GetEstimatedSpeciesTotalsValuesWithSE(string tableName, string c1) => (IQuery) this._queryProvider.Session.CreateSQLQuery(string.Format("SELECT \r\n                        EstimateType, \r\n                        EstimateUnitsId, \r\n                        EquationType, \r\n                        EstimateValue, \r\n                        EstimateStandardError \r\n                    FROM {0} \r\n                    WHERE \r\n                        YearGuid = :y \r\n                        AND {1} = :StudyAreaCVO", (object) tableName, (object) c1)).AddScalar("EstimateType", (IType) NHibernateUtil.Int32).AddScalar("EstimateUnitsId", (IType) NHibernateUtil.Int32).AddScalar("EquationType", (IType) NHibernateUtil.Int32).AddScalar("EstimateValue", (IType) NHibernateUtil.Double).AddScalar("EstimateStandardError", (IType) NHibernateUtil.Double);

    public IQuery GetEstimatedPollutantsTotalValues(string tableName, string c1) => (IQuery) this._queryProvider.Session.CreateSQLQuery(string.Format("SELECT \r\n                        Pollutant, \r\n                        EstimateValue AS PolutionRemoval \r\n                    FROM {0}\r\n                    WHERE \r\n                        YearGuid = :y \r\n                        AND {1} = :StudyAreaCVO \r\n                        AND EstimateType = :estType \r\n                        AND EstimateUnitsId = :estUnits \r\n                        AND EquationType = :eqType", (object) tableName, (object) c1)).AddScalar("Pollutant", (IType) NHibernateUtil.Int32).AddScalar("PolutionRemoval", (IType) NHibernateUtil.Double);

    public IQuery GetEstimatedPollutantsByStratumValues(
      string tableName,
      string c1,
      string c2)
    {
      return (IQuery) this._queryProvider.Session.CreateSQLQuery(string.Format("SELECT \r\n                        {1}, \r\n                        {2}, \r\n                        Pollutant, \r\n                        EstimateValue \r\n                    FROM {0} \r\n                    WHERE \r\n                        YearGuid = :y \r\n                        AND EstimateType = :estType \r\n                        AND EstimateUnitsId = :estUnits \r\n                        AND EquationType = :eqType \r\n                    ORDER BY {1}, {2}, Pollutant", (object) tableName, (object) c1, (object) c2)).AddScalar(c1, (IType) NHibernateUtil.Int32).AddScalar(c2, (IType) NHibernateUtil.Int32).AddScalar("Pollutant", (IType) NHibernateUtil.Int32).AddScalar("EstimateValue", (IType) NHibernateUtil.Double);
    }

    public IQuery GetEstimatedValues2(string tableName, string c1, string c2) => (IQuery) this._queryProvider.Session.CreateSQLQuery(string.Format("SELECT \r\n                        {1},\r\n                        {2},\r\n                        EstimateValue \r\n                    FROM {0} \r\n                    WHERE\r\n                        YearGuid = :y \r\n                        AND EstimateType = :estType \r\n                        AND EstimateUnitsId = :estUnits \r\n                        AND EquationType = :eqType", (object) tableName, (object) c1, (object) c2)).AddScalar(c1, (IType) NHibernateUtil.Int32).AddScalar(c2, (IType) NHibernateUtil.Int32).AddScalar("EstimateValue", (IType) NHibernateUtil.Double);

    public IQuery GetAverageCondition(string tableName, string fields, string dieback)
    {
      ISQLQuery q = this._queryProvider.Session.CreateSQLQuery(string.Format("SELECT \r\n                        {1}, \r\n                        SUM(\r\n                            iif({2} = 1, EstimateValue * 0.995, \r\n                                iif({2} = 2, EstimateValue * 0.945, \r\n                                    iif({2} = 3, EstimateValue * 0.825, \r\n                                        iif({2} = 4, EstimateValue * 0.625, \r\n                                            iif({2} = 5, EstimateValue * 0.375, \r\n                                                iif({2} = 6, EstimateValue * 0.13, 0)\r\n                                            )\r\n                                        )\r\n                                    )\r\n                                )\r\n                            )\r\n                        ) AS EstimateValue\r\n                    FROM {0} \r\n                    WHERE \r\n                        YearGuid = :y \r\n                        AND EstimateType = :estType \r\n                        AND EstimateUnitsId = :estUnits \r\n                        AND EquationType = :eqType \r\n                        AND (EstimateValue > 0 OR EstimateStandardError > 0) \r\n                    Group by {1}", (object) tableName, (object) fields, (object) dieback)).AddScalar("EstimateValue", (IType) NHibernateUtil.Double);
      this.AddIntScalartToFields(q, fields);
      return (IQuery) q;
    }

    public IQuery GetStudyAreaAverageCondition(
      string tableName,
      string c1,
      string c2,
      string dieback)
    {
      return (IQuery) this._queryProvider.Session.CreateSQLQuery(string.Format("SELECT \r\n                        {1}, \r\n                        {2}, \r\n                        SUM(\r\n                            iif({3} = 1, EstimateValue * 0.995, \r\n                                iif({3} = 2, EstimateValue * 0.945, \r\n                                    iif({3} = 3, EstimateValue * 0.825, \r\n                                        iif({3} = 4, EstimateValue * 0.625, \r\n                                            iif({3} = 5, EstimateValue * 0.375, \r\n                                                iif({3} = 6, EstimateValue * 0.13, 0)\r\n                                            )\r\n                                        )\r\n                                    )\r\n                                )\r\n                            )\r\n                        ) AS AverageCondition\r\n                    FROM {0} \r\n                    WHERE \r\n                        YearGuid = :y \r\n                        AND EstimateType = :estType \r\n                        AND EstimateUnitsId = :estUnits \r\n                        AND EquationType = :eqType \r\n                        AND (EstimateValue > 0 OR EstimateStandardError > 0) \r\n                        AND {1} = :strataStudyArea \r\n                        AND {2} = :speciesTotal \r\n                    Group by {1}, {2}", (object) tableName, (object) c1, (object) c2, (object) dieback)).AddScalar(c1, (IType) NHibernateUtil.Int32).AddScalar(c2, (IType) NHibernateUtil.Int32).AddScalar("AverageCondition", (IType) NHibernateUtil.Double);
    }

    public IQuery GetStudyAreaValues(
      string tableName,
      string strataStudyArea,
      string speciesTotal)
    {
      return (IQuery) this._queryProvider.Session.CreateSQLQuery(string.Format("SELECT \r\n                        {2}, \r\n                        EstimateType, \r\n                        EstimateValue, \r\n                        EstimateStandardError \r\n                    FROM {0} \r\n                    WHERE \r\n                        YearGuid = :y \r\n                        AND (\r\n                            (EstimateType = :estType AND EstimateUnitsId = :estUnits AND EquationType = :eqType) \r\n                            OR (EstimateType = :estType2 AND EstimateUnitsId = :estUnits2 AND EquationType = :eqType2) \r\n                            OR (EstimateType = :estType3 AND EstimateUnitsId = :estUnits3 AND EquationType = :eqType3) \r\n                            OR (EstimateType = :estType4 AND EstimateUnitsId = :estUnits4 AND EquationType = :eqType4)\r\n                        ) \r\n                        AND (EstimateValue > 0 OR EstimateStandardError > 0) \r\n                        AND {1} = :strataStudyArea \r\n                        AND {2} = :speciesTotal \r\n                    ORDER BY \r\n                        {1}, \r\n                        EstimateType", (object) tableName, (object) strataStudyArea, (object) speciesTotal)).AddScalar(speciesTotal, (IType) NHibernateUtil.Int32).AddScalar("EstimateType", (IType) NHibernateUtil.Int32).AddScalar("EstimateValue", (IType) NHibernateUtil.Double).AddScalar("EstimateStandardError", (IType) NHibernateUtil.Double);
    }

    public IQuery GetPollutantRemovalMonthlyValues(string c1) => (IQuery) this._queryProvider.Session.CreateSQLQuery(string.Format("SELECT \r\n                        Q.Month, \r\n                        Sum(Q.AvgOfFlux * Q.AvgOfTrCovArea) AS myAmount,\r\n                        Sum(Q.AvgOfFluxMax * Q.AvgOfTrCovArea) AS myAmountMax,\r\n                        Sum(Q.AvgOfFluxMin * Q.AvgOfTrCovArea) AS myAmountMin\r\n                    FROM \r\n                    (\r\n                        SELECT \r\n                            Month,\r\n                            Day,\r\n                            Hour,\r\n                            TreeShrub, \r\n                            Avg(Flux) AS AvgOfFlux,\r\n                            Avg(FluxMax) as AvgOfFluxMax,\r\n                            Avg(FluxMin) as AvgOfFluxMin,\r\n                            Avg(Value) AS AvgOfValue,\r\n                            Avg(ValueMax) as AvgOfValueMax,\r\n                            Avg(ValueMin) as AvgOfValueMin, \r\n                            Avg(TrCovArea) AS AvgOfTrCovArea \r\n                        FROM \r\n                            Pollutants \r\n                        WHERE \r\n                            YearGuid = :y \r\n                            AND Pollutant = :pollutant \r\n                            AND TreeShrub IN ({0})\r\n                        GROUP BY \r\n                            Month, Day, Hour, TreeShrub\r\n                    ) AS Q \r\n                    GROUP BY Q.Month \r\n                    ORDER BY Q.Month", (object) c1)).AddScalar("Month", (IType) NHibernateUtil.Int32).AddScalar("myAmount", (IType) NHibernateUtil.Double).AddScalar("myAmountMin", (IType) NHibernateUtil.Double).AddScalar("myAmountMax", (IType) NHibernateUtil.Double);

    public IQuery GetPollutionRemovalByMonthAndPollutant(string c1) => (IQuery) this._queryProvider.Session.CreateSQLQuery(string.Format("SELECT \r\n                        Q.Pollutant, \r\n                        Q.Month, \r\n                        Sum(Q.AvgOfFlux * Q.AvgOfTrCovArea)/1000 AS myAmount, \r\n                        Sum(Q.AvgOfValue * Q.AvgOfTrCovArea) AS myValue \r\n                    FROM (\r\n                        SELECT \r\n                            Pollutant,\r\n                            Month,\r\n                            Day,\r\n                            Hour,\r\n                            TreeShrub, \r\n                            Avg(Flux) AS AvgOfFlux,\r\n                            Avg(Value) AS AvgOfValue, \r\n                            Avg(TrCovArea) AS AvgOfTrCovArea \r\n                            FROM Pollutants \r\n                            WHERE \r\n                                YearGuid = :y\r\n                                AND TreeShrub IN ({0})\r\n                            GROUP BY \r\n                                Pollutant, Month, Day, Hour, TreeShrub\r\n                            ) AS Q \r\n                    GROUP BY \r\n                        Pollutant, Month;", (object) c1)).AddScalar("Pollutant", (IType) NHibernateUtil.String).AddScalar("Month", (IType) NHibernateUtil.Int32).AddScalar("myAmount", (IType) NHibernateUtil.Double).AddScalar("myValue", (IType) NHibernateUtil.Double);

    public IQuery GetPollutionDataCount(string c1) => (IQuery) this._queryProvider.Session.CreateSQLQuery(string.Format("SELECT \r\n                        COUNT(*) AS cnt\r\n                    FROM \r\n                        Pollutants \r\n                    WHERE\r\n                        YearGuid = :y\r\n                        AND TreeShrub IN ({0})\r\n                        AND Pollutant NOT IN ('PM10', 'PM10*')", (object) c1)).AddScalar("cnt", (IType) NHibernateUtil.Int32);

    public IQuery GetCarbonSum(string c1) => (IQuery) this._queryProvider.Session.CreateSQLQuery(string.Format("SELECT \r\n                        sum({0}) AS total\r\n                    FROM \r\n                        IndividualTreeEffects \r\n                    WHERE \r\n                        YearGuid = :y", (object) c1)).AddScalar("total", (IType) NHibernateUtil.Double);

    public IQuery GetAvailableBenefitTypes(string c1) => (IQuery) this._queryProvider.Session.CreateSQLQuery(string.Format("SELECT DISTINCT TreeShrub\r\n                    FROM BenMapTable\r\n                    WHERE\r\n                        YearGuid = :y\r\n                        AND TreeShrub IN ({0})", (object) c1)).AddScalar("TreeShrub", (IType) NHibernateUtil.String);

    public IQuery GetCarbonData(string c1) => (IQuery) this._queryProvider.Session.CreateSQLQuery(string.Format("SELECT \r\n                        ITE.PlotId AS PlotId,\r\n                        ITE.TreeId AS TreeId,\r\n                        ITE.SppScientificName AS SppScientificName, \r\n                        ITE.SppCommonName AS SppCommonName,\r\n                        ITE.{0} AS {0},\r\n                        ITE.{0} / :tc * 100 AS PercentOfTotal,     \r\n                        EcoTrees.xCoordinate AS xCoordinate,\r\n                        EcoTrees.yCoordinate AS yCoordinate,  \r\n                        EcoTrees.Comments AS Comments,  \r\n                        EcoTrees.UserId AS UserId  \r\n                    FROM \r\n                        IndividualTreeEffects AS ITE INNER JOIN \r\n                                (EcoPlots\r\n                                    INNER JOIN EcoTrees\r\n                                        ON EcoPlots.PlotKey = EcoTrees.PlotKey\r\n                                )\r\n                            ON(ITE.TreeId = EcoTrees.TreeId)\r\n                            AND(ITE.PlotId = EcoPlots.PlotId)\r\n                    WHERE \r\n                        YearGuid = :y\r\n                    ORDER BY \r\n                        ITE.PlotID, \r\n                        ITE.TreeID", (object) c1)).AddScalar("PlotId", (IType) NHibernateUtil.Int32).AddScalar("TreeId", (IType) NHibernateUtil.Int32).AddScalar("SppScientificName", (IType) NHibernateUtil.String).AddScalar("SppCommonName", (IType) NHibernateUtil.String).AddScalar(c1, (IType) NHibernateUtil.Double).AddScalar("PercentOfTotal", (IType) NHibernateUtil.Double).AddScalar("xCoordinate", (IType) NHibernateUtil.Double).AddScalar("yCoordinate", (IType) NHibernateUtil.Double).AddScalar("Comments", (IType) NHibernateUtil.String).AddScalar("UserId", (IType) NHibernateUtil.String);

    public IQuery GetAirQualityHealthImpactsAndValuesCombined(string c1) => (IQuery) this._queryProvider.Session.CreateSQLQuery(string.Format("SELECT \r\n                        HealthFactor,    \r\n                        SUM(IIF(NO2Incidence  <> -1, NO2Incidence,  null)) AS NO2Inc, \r\n                        SUM(IIF(NO2Value      <> -1, NO2Value,      null)) AS NO2Val,\r\n                        SUM(IIF(O3Incidence   <> -1, O3Incidence,   null)) AS O3Inc,\r\n                        SUM(IIF(O3Value       <> -1, O3Value,       null)) AS O3Val,\r\n                        SUM(IIF(PM25Incidence <> -1, PM25Incidence, null)) AS PM25Inc,\r\n                        SUM(IIF(PM25Value     <> -1, PM25Value,     null)) AS PM25Val,\r\n                        SUM(IIF(SO2Incidence  <> -1, SO2Incidence,  null)) AS SO2Inc,\r\n                        SUM(IIF(SO2Value      <> -1, SO2Value,      null)) AS SO2Val\r\n                    FROM BenMapTable\r\n                    WHERE\r\n                        YearGuid = :y\r\n                        AND TreeShrub IN ({0})\r\n                    GROUP BY HealthFactor\r\n                    ORDER BY HealthFactor", (object) c1)).AddScalar("HealthFactor", (IType) NHibernateUtil.String).AddScalar("NO2Inc", (IType) NHibernateUtil.Double).AddScalar("NO2Val", (IType) NHibernateUtil.Double).AddScalar("O3Inc", (IType) NHibernateUtil.Double).AddScalar("O3Val", (IType) NHibernateUtil.Double).AddScalar("PM25Inc", (IType) NHibernateUtil.Double).AddScalar("PM25Val", (IType) NHibernateUtil.Double).AddScalar("SO2Inc", (IType) NHibernateUtil.Double).AddScalar("SO2Val", (IType) NHibernateUtil.Double);

    public IQuery GetOxygenProductionOfTrees(string tableName, string c1, string c2) => (IQuery) this._queryProvider.Session.CreateSQLQuery(string.Format("SELECT \r\n                        {1},\r\n                        EstimateValue * 32 / 12 AS carbonStorage\r\n                    FROM {0} \r\n                    WHERE \r\n                        YearGuid = :y \r\n                        AND EstimateType = :estType \r\n                        AND EstimateUnitsId = :estUnits \r\n                        AND {2} = :speciesTotal \r\n                    ORDER BY {1}", (object) tableName, (object) c1, (object) c2)).AddScalar(c1, (IType) NHibernateUtil.Int32).AddScalar("carbonStorage", (IType) NHibernateUtil.Double);

    public IQuery GetPestEstimateValues(string tableName, string c1) => (IQuery) this._queryProvider.Session.CreateSQLQuery(string.Format("SELECT \r\n                        Species,\r\n                        {1},\r\n                        EstimateValue,\r\n                        EstimateStandardError\r\n                    FROM {0}\r\n                    WHERE \r\n                        YearGuid = :y", (object) tableName, (object) c1)).AddScalar("Species", (IType) NHibernateUtil.Int16).AddScalar(c1, (IType) NHibernateUtil.Int16).AddScalar("EstimateValue", (IType) NHibernateUtil.Double).AddScalar("EstimateStandardError", (IType) NHibernateUtil.Double);

    public IQuery GetStratumTreePestEstimateValues(string tableName, string c1) => (IQuery) this._queryProvider.Session.CreateSQLQuery(string.Format("SELECT \r\n                        Strata,\r\n                        {1},\r\n                        EstimateValue,\r\n                        EstimateStandardError\r\n                    FROM {0}\r\n                    WHERE \r\n                        YearGuid = :y\r\n                        AND Strata <> :strata", (object) tableName, (object) c1)).AddScalar("Strata", (IType) NHibernateUtil.Int16).AddScalar(c1, (IType) NHibernateUtil.Int16).AddScalar("EstimateValue", (IType) NHibernateUtil.Double).AddScalar("EstimateStandardError", (IType) NHibernateUtil.Double);

    private void AddIntScalartToFields(ISQLQuery q, string fields)
    {
      foreach (string fields1 in this.ToFieldsArray(fields))
        q.AddScalar(fields1, (IType) NHibernateUtil.Int32);
    }

    private string[] ToFieldsArray(string fields) => fields.Split(new char[2]
    {
      ',',
      ' '
    }, StringSplitOptions.RemoveEmptyEntries);

    public IQuery GetSASEstimateValues(string tableName, string c1) => (IQuery) this._queryProvider.Session.CreateSQLQuery(string.Format("SELECT \r\n                        EcoStrata.StrataKey AS StrataKey,\r\n                        {0}.EstimateValue AS EstimateValue \r\n                     FROM (\r\n                        {0}\r\n                            INNER JOIN \r\n                                ClassValueTable \r\n                                    ON ({0}.{1} = ClassValueTable.ClassValueOrder) \r\n                                    AND ({0}.YearGuid = ClassValueTable.YearGuid)\r\n                                    ) INNER JOIN \r\n                                        EcoStrata \r\n                                            ON (EcoStrata.Description = ClassValueTable.ClassValueName) \r\n                                            AND (ClassValueTable.YearGuid = EcoStrata.YearKey) \r\n                    WHERE \r\n                        ClassValueTable.ClassifierId = :strataclassifier \r\n                        AND {0}.{1} <> :studyareaclassvalue \r\n                        AND {0}.EstimateType = :estimatetype \r\n                        AND {0}.EquationType = :equationtype \r\n                        AND {0}.EstimateUnitsId = :unitid\r\n                        AND {0}.YearGuid = :y", (object) tableName, (object) c1)).AddScalar("StrataKey", (IType) NHibernateUtil.Guid).AddScalar("EstimateValue", (IType) NHibernateUtil.Double);

    public IQuery GetSASEstimateValues(string tableName, string c1, string c2) => (IQuery) this._queryProvider.Session.CreateSQLQuery(string.Format("SELECT\r\n                            EcoStrata.StrataKey AS StrataKey, \r\n                            [{0}].EstimateValue AS EstimateValue, \r\n                            EcoStrata.[Size] AS Area\r\n                     FROM (\r\n                        {0} \r\n                            INNER JOIN \r\n                                ClassValueTable \r\n                                    ON ([{0}].{1} = ClassValueTable.ClassValueOrder)\r\n                                    AND ([{0}].YearGuid = ClassValueTable.YearGuid)\r\n                        ) \r\n                            INNER JOIN \r\n                                EcoStrata \r\n                                    ON (EcoStrata.Description = ClassValueTable.ClassValueName) \r\n                                    AND (ClassValueTable.YearGuid = EcoStrata.YearKey)\r\n                     WHERE\r\n                            ClassValueTable.ClassifierId = :strataclassifier \r\n                            AND [{0}].{1} <> :studyareaclassvalue \r\n                            AND [{0}].EstimateType = :estimatetype \r\n                            AND [{0}].EquationType = :equationtype \r\n                            AND [{0}].EstimateUnitsId = :unitid \r\n                            AND [{0}].YearGuid = :y\r\n                            AND [{0}].{2} = :treeclassvalue", (object) tableName, (object) c1, (object) c2)).AddScalar("StrataKey", (IType) NHibernateUtil.Guid).AddScalar("EstimateValue", (IType) NHibernateUtil.Double).AddScalar("Area", (IType) NHibernateUtil.Double);

    public IQuery MovingEcoForecastCohortResults(string fromDatabase)
    {
      string randomString = this.CreateRandomString("a");
      return (IQuery) this._queryProvider.Session.CreateSQLQuery(string.Format("ATTACH '{0}' AS {1};", (object) fromDatabase, (object) randomString) + string.Format("INSERT INTO EcoForecastCohortResults ( \r\n                        ForecastKey, \r\n                        StratumKey, \r\n                        ForecastedYear, \r\n                        DataType, \r\n                        DBHRangeStart, \r\n                        DBHRangeEnd, \r\n                        DataValue, \r\n                        Revision, \r\n                        CohortResultKey \r\n                    )  \r\n                    SELECT \r\n                        EcoForecastCohortResults.ForecastKey, \r\n                        EcoForecastCohortResults.StratumKey, \r\n                        EcoForecastCohortResults.ForecastedYear, \r\n                        EcoForecastCohortResults.DataType, \r\n                        EcoForecastCohortResults.DBHRangeStart, \r\n                        EcoForecastCohortResults.DBHRangeEnd, \r\n                        EcoForecastCohortResults.DataValue, \r\n                        EcoForecastCohortResults.Revision, \r\n                        EcoForecastCohortResults.CohortResultKey \r\n                    FROM \r\n                        {0}.EcoForecastCohortResults\r\n                    WHERE \r\n                        EcoForecastCohortResults.ForecastKey = :ForecastKey", (object) randomString));
    }

    public IQuery MovingEcoForecastPollutantResults(string fromDatabase)
    {
      string randomString = this.CreateRandomString("b");
      return (IQuery) this._queryProvider.Session.CreateSQLQuery(string.Format("ATTACH '{0}' AS {1};", (object) fromDatabase, (object) randomString) + string.Format("INSERT INTO EcoForecastPollutantResults ( \r\n                        PollutantResultKey, \r\n                        ForecastKey, \r\n                        PollutantId, \r\n                        ForecastedYear, \r\n                        AmountRemoval, \r\n                        DollarValue \r\n                    )   \r\n                    SELECT \r\n                        EcoForecastPollutantResults.PollutantResultKey, \r\n                        EcoForecastPollutantResults.ForecastKey, \r\n                        EcoForecastPollutantResults.PollutantId, \r\n                        EcoForecastPollutantResults.ForecastedYear, \r\n                        EcoForecastPollutantResults.AmountRemoval, \r\n                        EcoForecastPollutantResults.DollarValue \r\n                    FROM \r\n                        {0}.EcoForecastPollutantResults \r\n                    WHERE \r\n                        EcoForecastPollutantResults.ForecastKey=:ForecastKey \r\n                        AND EcoForecastPollutantResults.ForecastedYear <= :ForecastedYear", (object) randomString));
    }

    private string CreateRandomString(string prefix)
    {
      Random random = new Random();
      return string.Format("{0}{1}", (object) prefix, (object) random.Next().ToString((IFormatProvider) CultureInfo.InvariantCulture));
    }
  }
}
